
open build/OCaml
DefineCommandVars()

.PHONY: clean install_library install uninstall uninstall_library tags doc_library doc

USE_OCAMLFIND = true

OCAMLPACKS[] = core lwt lwt.unix lwt.ssl lwt.preemptive 

if $(not $(OCAMLFIND_EXISTS))
  eprintln(This project requires ocamlfind, but is was not found.)
  eprintln(You need to install ocamlfind and run "omake --configure".)
  exit 1

NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
BYTE_ENABLED = true

OCAMLFLAGS += -thread -bin-annot -annot -absname
OCAMLCFLAGS +=
OCAMLOPTFLAGS +=
OCAML_LINK_FLAGS +=
OCAML_BYTE_LINK_FLAGS +=
OCAML_NATIVE_LINK_FLAGS +=
OCAMLFINDFLAGS += 


clean:
  rm -fr _build OMakefile.omc OMakeroot.omc .omakedb .omakedb.lock

install: install_library
uninstall: uninstall_library

LIB_MODULES[] = flow_base flow_list flow_io flow_sys flow_net flow
SOURCES= $(add-wrapper src/lib/, .ml, $(LIB_MODULES))

TAGS: $(SOURCES)
      otags $(SOURCES)
tags: TAGS

doc: doc_library

.SUBDIRS: .
  if $(not $(file-exists _build/))
    mkdir -p _build/lib _build/test
  vmount(-l, src/, _build/)

  .SUBDIRS: _build/lib/
    LIB_NAME= flow
    .DEFAULT: $(OCamlLibrary $(LIB_NAME), $(LIB_MODULES))
    META:
      echo "description = \"Exceptionless layer on top of core+lwt\"" > META
      echo "version = \"1\"" >> META
      echo "archive(byte) = \"$(LIB_NAME).cma\"" >> META
      echo "archive(native) = \"$(LIB_NAME).cmxa\"" >> META
      echo "requires = \"core, lwt, lwt.unix, lwt.ssl lwt.preemptive \"" >> META
    install_library: $(LIB_NAME).cma $(LIB_NAME).cmxa META uninstall_library
      ocamlfind install $(LIB_NAME) META *.cm[iox] $(LIB_NAME).cma $(LIB_NAME).cmxa $(LIB_NAME).a
    uninstall_library:
      ocamlfind remove $(LIB_NAME)
    doc_library: $(LIB_NAME).cma
      mkdir doclib
      ocamlfind ocamldoc -package core,lwt,lwt.unix,lwt.ssl,lwt.preemptive \
        -charset UTF-8 -d doclib/ -t "The Flow Monad Library" -html \
        -keep-code -colorize-code *.mli *.ml -sort -I .

  .SUBDIRS: _build/test/
    OCAMLFINDFLAGS += -syntax camlp4o
    OCAMLFLAGS += -I ../lib
    OCAMLCFLAGS += flow.cma
    OCAMLOPTFLAGS += flow.cmxa
    OCAMLPACKS[] +=  sexplib sexplib.syntax
    .DEFAULT: $(OCamlProgram io_test, io_test) $(OCamlProgram sys_test, sys_test)

